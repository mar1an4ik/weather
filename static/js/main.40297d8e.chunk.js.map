{"version":3,"sources":["Components/ForecastDays.module.css","Components/TabContent.module.css","Components/InputContainer.module.css","Api/api.js","Redux/WeatherReducer.js","Components/ForecastDays.jsx","Components/TabContent.jsx","Images/gps.png","Components/InputContainer.jsx","Components/MainContainer.jsx","App.js","reportWebVitals.js","Redux/redux_store.js","index.js"],"names":["module","exports","ACCESS_KEY","instance","axios","baseURL","api","city","get","then","response","data","lat","lon","daily","initialState","curWeather","forecast","setWeather","type","setForecast","WeatherReducer","state","action","statecopy","push","ForecastDays","props","console","log","className","style","info","firstColumn","secondColumn","Math","round","temp","day","night","morn","weather","description","pressure","humidity","wind_speed","TabContent","sunRise","Date","sys","sunrise","toLocaleTimeString","sunSet","sunset","useState","active","setActive","openTab","e","target","dataset","index","name","main","wind","speed","arrayNextDays","map","n","i","onClick","data-index","InputContainer","ref1","React","createRef","findCity","setFindCity","elem","days","date","setDate","getDate","getDay","initalizeNextDays","options","ref","inputCity","onChange","value","placeholder","findBtn","getWeatherCity","current","length","getWeatherGPS","gpsIcon","src","gps","MainContainer","connect","weatherTree","getCurrentWeatherCityThunk","dispatch","coord","response2","getCurrentWeatherGPSThunk","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40297d8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ForecastDays_info__syNrh\",\"firstColumn\":\"ForecastDays_firstColumn__2dEvF\",\"secondColumn\":\"ForecastDays_secondColumn__1Uily\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"TabContent_info__2VHP5\",\"firstColumn\":\"TabContent_firstColumn__Gcpaj\",\"secondColumn\":\"TabContent_secondColumn__3EAKC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"InputContainer_main__N8bQY\",\"options\":\"InputContainer_options__NvU9b\",\"inputCity\":\"InputContainer_inputCity__kdt_j\",\"gpsIcon\":\"InputContainer_gpsIcon__3ylxq\",\"findBtn\":\"InputContainer_findBtn__YmT5D\"};","import * as axios from \"axios\";\r\n\r\nconst ACCESS_KEY = \"?APPID=d951923c19e1f20280a668a0cce67fcb\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://api.openweathermap.org/data/2.5\",\r\n});\r\n\r\nexport const api = {\r\n\r\n    getCurWeatherCity(city) {\r\n        return instance.get(`/weather` + ACCESS_KEY+\"&q=\"+city).then((response) => {\r\n\r\n            return response.data\r\n        });},\r\n    getCurWeatherGPS(lat,lon) {\r\n        return instance.get(`/weather`+ACCESS_KEY+\"&lat=\"+lat+\"&lon=\"+lon).then((response) => {\r\n\r\n            return response.data\r\n        });},\r\n    setForecast(lat,lon) {\r\n        return instance.get(`/onecall`+ACCESS_KEY+\"&lat=\"+lat+\"&lon=\"+lon).then((response) => {\r\n\r\n            return response.data.daily\r\n        });},\r\n\r\n};","import React from \"react\"\r\nimport {api} from \"../Api/api\";\r\n\r\nlet initialState = {\r\n    curWeather: [],\r\n    forecast:[],\r\n};\r\n\r\n\r\nconst WeatherReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"setWeather\": {\r\n            let statecopy = {...state};\r\n            statecopy.curWeather = [...state.curWeather]\r\n            statecopy.curWeather.push(action.curWeather)\r\n\r\n            return statecopy;\r\n        }\r\n        case \"setForecast\": {\r\n            let statecopy = {...state};\r\n            statecopy.forecast = [...state.forecast]\r\n            statecopy.forecast.push(action.forecast)\r\n            debugger\r\n            return statecopy;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport const setWeather = (curWeather) => {\r\n\r\n    return {\r\n        type: \"setWeather\",\r\n        curWeather: curWeather,\r\n    }\r\n};\r\nexport const setForecast = (forecast) => {\r\n\r\n    return {\r\n        type: \"setForecast\",\r\n        forecast: forecast,\r\n    }\r\n};\r\n\r\nexport const getCurrentWeatherCityThunk = (city) => (dispatch) => {\r\n\r\n    return api.getCurWeatherCity(city).then((response) => {\r\n        dispatch(setWeather(response))\r\n        api.setForecast(response.coord.lat,response.coord.lon).then((response2)=>{dispatch(setForecast(response2))})\r\n\r\n    })\r\n};\r\nexport const getCurrentWeatherGPSThunk = (lat,lon) => (dispatch) => {\r\n\r\n    return api.getCurWeatherGPS(lat,lon).then((response) => {\r\n\r\n        dispatch(setWeather(response))\r\n        api.setForecast(lat,lon).then((response2)=>{dispatch(setForecast(response2))})\r\n    })\r\n};\r\n\r\n\r\n\r\nexport default WeatherReducer;","import style from \"./ForecastDays.module.css\"\r\n\r\nconst ForecastDays = (props) => {\r\n    console.log(props)\r\n    return (<div className={style.info}>\r\n        <div className={style.firstColumn}>\r\n            <ul>\r\n                <li> Day temperature:</li>\r\n                <li> Night temperature:</li>\r\n                <li> Morning temperature:</li>\r\n                <li> Description:</li>\r\n                <li> Pressure:</li>\r\n                <li> humidity:</li>\r\n                <li> Wind speed:</li>\r\n            </ul>\r\n\r\n        </div>\r\n        <div className={style.secondColumn}>\r\n            <ul>\r\n                <li> {Math.round(props.forecast.temp.day - 273)}°C</li>\r\n                <li> {Math.round(props.forecast.temp.night - 273)}°C</li>\r\n                <li> {Math.round(props.forecast.temp.morn - 273)}°C</li>\r\n                <li> {props.forecast.weather[0].description}</li>\r\n                <li> {props.forecast.pressure}</li>\r\n                <li> {props.forecast.humidity}</li>\r\n                <li> {props.forecast.wind_speed}</li>\r\n            </ul>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\nexport default ForecastDays","import {useState} from \"react\";\r\nimport ForecastDays from \"./ForecastDays\";\r\nimport style from \"./TabContent.module.css\"\r\n\r\nconst TabContent = (props) => {\r\n\r\n    let sunRise = new Date(props.curWeather.sys.sunrise * 1000).toLocaleTimeString()\r\n    let sunSet = new Date(props.curWeather.sys.sunset * 1000).toLocaleTimeString()\r\n\r\n    const [active, setActive] = useState(null);\r\n    const openTab = e => setActive(+e.target.dataset.index);\r\n\r\n    return (<div>\r\n        <div>\r\n            <h3><b> {props.curWeather.name}</b></h3>\r\n        </div>\r\n        <div className={style.info}>\r\n            <div className={style.firstColumn}>\r\n\r\n                <ul>\r\n                    <li> Temperature:</li>\r\n                    <li> Description:</li>\r\n                    <li> Pressure:</li>\r\n                    <li> Humidity:</li>\r\n                    <li> Wind speed:</li>\r\n                    <li> Sun Rise:</li>\r\n                    <li> Sun Set:</li>\r\n                </ul>\r\n            </div>\r\n            <div className={style.secondColumn}>\r\n                <ul>\r\n                    <li> {Math.round(props.curWeather.main.temp - 273)}°C</li>\r\n                    <li> {props.curWeather.weather[0].description}</li>\r\n                    <li> {props.curWeather.main.pressure}</li>\r\n                    <li> {props.curWeather.main.humidity}</li>\r\n                    <li> {props.curWeather.wind.speed}</li>\r\n                    <li> {sunRise}</li>\r\n                    <li> {sunSet}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n            <div className=\"tab\">\r\n\r\n                {props.arrayNextDays ? props.arrayNextDays.map((n, i) => (\r\n                    <button\r\n                        className={`tablinks ${i === active ? 'active' : ''}`}\r\n                        onClick={openTab}\r\n                        data-index={i}\r\n                    >{n}</button>\r\n                )) : null}\r\n            </div>\r\n            {props.arrayNextDays[active] && <ForecastDays forecast={props.forecast[active]}/>}\r\n        </div>\r\n\r\n\r\n    </div>)\r\n}\r\n\r\nexport default TabContent","export default __webpack_public_path__ + \"static/media/gps.2872e538.png\";","import React, {useState} from \"react\"\r\nimport style from \"./InputContainer.module.css\"\r\nimport TabContent from \"./TabContent\";\r\nimport \"../Common/Tab.css\"\r\nimport gps from \"./../Images/gps.png\"\r\n\r\nconst InputContainer = (props) => {\r\n\r\n    const [active, setActive] = useState(null); //active tab\r\n    const openTab = e => setActive(+e.target.dataset.index); //set active tab\r\n    let ref1 = React.createRef(); //ref to textArea(we need to delete value after click)\r\n    let findCity = \"\";// out value in textarea ,which we send to onClick\r\n    let setFindCity = (elem) => {\r\n        findCity = elem;\r\n    }\r\n    let arrayNextDays = [] //next 7 days\r\n    //get next 7 days\r\n    const initalizeNextDays = () => {\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\r\n        for (let i = 1; i <= 7; i++) {\r\n            var date = new Date();\r\n            date.setDate(date.getDate() + i);\r\n            arrayNextDays.push(days[date.getDay()])\r\n        }\r\n    }\r\n    // handle on \"FIND\"\r\n    const findCityClicked = () => {\r\n        props.getWeatherCity(findCity)\r\n        setFindCity(\"\");\r\n        ref1.current.value = \"\";\r\n        setActive(props.curWeather.length)\r\n    }\r\n    // handle on GPS\r\n    const findGPSClicked = () => {\r\n        props.getWeatherGPS();\r\n        setActive(props.curWeather.length)\r\n    }\r\n\r\n    initalizeNextDays()  // Lets know what 7 days are next(from today date)\r\n\r\n    return (<div className={style.main}>\r\n        <div className={style.options}>\r\n\r\n            {/* Input City textarea */}\r\n            <input ref={ref1}\r\n                   className={style.inputCity}\r\n                   onChange={(e) => {\r\n                       setFindCity(e.target.value)\r\n                   }}\r\n                   type={\"text\"}\r\n                   placeholder={\"Enter city\"}/>\r\n\r\n            {/* find button */}\r\n            <button className={style.findBtn}\r\n                    onClick={findCityClicked}>Find\r\n            </button>\r\n\r\n            {/* gps button*/}\r\n            <img onClick={findGPSClicked} className={style.gpsIcon}\r\n                 src={gps}/>\r\n        </div>\r\n\r\n        {/* tabs initialize*/}\r\n        <div>\r\n            <div className={\"tab\"}>\r\n\r\n                {props.curWeather.map((n, i) => (\r\n                    <button\r\n                        className={`tablinks ${i === active ? 'active' : ''}`}\r\n                        onClick={openTab}\r\n                        data-index={i}\r\n                    >{n.name}</button>\r\n                ))}\r\n            </div>\r\n            {/* Open active TAB */}\r\n            {props.curWeather[active] && <TabContent curWeather={props.curWeather[active]}\r\n                                                     forecast={props.forecast[active]}\r\n                                                     arrayNextDays={arrayNextDays}/>}\r\n        </div>\r\n\r\n\r\n    </div>)\r\n}\r\n\r\nexport default InputContainer","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getCurrentWeatherCityThunk,\r\n    getCurrentWeatherGPSThunk,\r\n} from \"../Redux/WeatherReducer\";\r\nimport InputContainer from \"./InputContainer\";\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n    let getWeatherGPS = () => {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            props.getCurrentWeatherGPSThunk(position.coords.latitude, position.coords.longitude)\r\n        }, () => {\r\n            alert(\"You didnt allow gps\")\r\n        });\r\n    } // get GPS location and initialize\r\n\r\n    let getWeatherCity = (city) => {\r\n        props.getCurrentWeatherCityThunk(city)\r\n    } // get weather api with city.name\r\n\r\n    return (<InputContainer getWeatherCity={getWeatherCity}\r\n                            curWeather={props.curWeather}\r\n                            getWeatherGPS={getWeatherGPS}\r\n                            forecast={props.forecast}/>\r\n    )\r\n}\r\n\r\n\r\nlet stateGo = (state) => {\r\n    return {\r\n        curWeather: state.weatherTree.curWeather,\r\n        forecast: state.weatherTree.forecast\r\n    }\r\n};\r\n\r\nconst MainContainer = connect(stateGo, {getCurrentWeatherCityThunk, getCurrentWeatherGPSThunk})(Main);\r\n\r\n\r\nexport default MainContainer","import './App.css';\n\nimport React from \"react\";\nimport MainContainer from \"./Components/MainContainer\";\n\nfunction App() {\n    return (\n            <MainContainer/>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport WeatherReducer from \"./WeatherReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet reducers = combineReducers({\r\n    weatherTree: WeatherReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./Redux/redux_store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}