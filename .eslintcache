[{"D:\\getphotos\\src\\index.js":"1","D:\\getphotos\\src\\reportWebVitals.js":"2","D:\\getphotos\\src\\App.js":"3","D:\\getphotos\\src\\Api\\api.js":"4","D:\\getphotos\\src\\Components\\MainContainer.jsx":"5","D:\\getphotos\\src\\Redux\\redux_store.js":"6","D:\\getphotos\\src\\Redux\\WeatherReducer.js":"7","D:\\getphotos\\src\\Components\\TabContent.jsx":"8","D:\\getphotos\\src\\Components\\InputContainer.jsx":"9","D:\\getphotos\\src\\Components\\ForecastDays.jsx":"10"},{"size":628,"mtime":1608623150928,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":194,"mtime":1607107274990,"results":"14","hashOfConfig":"12"},{"size":757,"mtime":1608648926727,"results":"15","hashOfConfig":"12"},{"size":1245,"mtime":1608657090055,"results":"16","hashOfConfig":"12"},{"size":452,"mtime":1608623150909,"results":"17","hashOfConfig":"12"},{"size":1651,"mtime":1608650716638,"results":"18","hashOfConfig":"12"},{"size":2115,"mtime":1608656698774,"results":"19","hashOfConfig":"12"},{"size":2933,"mtime":1608657090045,"results":"20","hashOfConfig":"12"},{"size":1138,"mtime":1608657090051,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"11exgxc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\getphotos\\src\\index.js",[],["45","46"],"D:\\getphotos\\src\\reportWebVitals.js",[],"D:\\getphotos\\src\\App.js",[],"D:\\getphotos\\src\\Api\\api.js",[],"D:\\getphotos\\src\\Components\\MainContainer.jsx",[],"D:\\getphotos\\src\\Redux\\redux_store.js",[],"D:\\getphotos\\src\\Redux\\WeatherReducer.js",["47"],"import React from \"react\"\r\nimport {api} from \"../Api/api\";\r\n\r\nlet initialState = {\r\n    curWeather: [],\r\n    forecast:[],\r\n};\r\n\r\n\r\nconst WeatherReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"setWeather\": {\r\n            let statecopy = {...state};\r\n            statecopy.curWeather = [...state.curWeather]\r\n            statecopy.curWeather.push(action.curWeather)\r\n\r\n            return statecopy;\r\n        }\r\n        case \"setForecast\": {\r\n            let statecopy = {...state};\r\n            statecopy.forecast = [...state.forecast]\r\n            statecopy.forecast.push(action.forecast)\r\n            debugger\r\n            return statecopy;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport const setWeather = (curWeather) => {\r\n\r\n    return {\r\n        type: \"setWeather\",\r\n        curWeather: curWeather,\r\n    }\r\n};\r\nexport const setForecast = (forecast) => {\r\n\r\n    return {\r\n        type: \"setForecast\",\r\n        forecast: forecast,\r\n    }\r\n};\r\n\r\nexport const getCurrentWeatherCityThunk = (city) => (dispatch) => {\r\n\r\n    return api.getCurWeatherCity(city).then((response) => {\r\n        dispatch(setWeather(response))\r\n        api.setForecast(response.coord.lat,response.coord.lon).then((response2)=>{dispatch(setForecast(response2))})\r\n\r\n    })\r\n};\r\nexport const getCurrentWeatherGPSThunk = (lat,lon) => (dispatch) => {\r\n\r\n    return api.getCurWeatherGPS(lat,lon).then((response) => {\r\n\r\n        dispatch(setWeather(response))\r\n        api.setForecast(lat,lon).then((response2)=>{dispatch(setForecast(response2))})\r\n    })\r\n};\r\n\r\n\r\n\r\nexport default WeatherReducer;","D:\\getphotos\\src\\Components\\TabContent.jsx",[],"D:\\getphotos\\src\\Components\\InputContainer.jsx",["48"],"import React, {useState} from \"react\"\r\nimport style from \"./InputContainer.module.css\"\r\nimport TabContent from \"./TabContent\";\r\nimport \"../Common/Tab.css\"\r\nimport gps from \"./../Images/gps.png\"\r\n\r\nconst InputContainer = (props) => {\r\n\r\n    const [active, setActive] = useState(null); //active tab\r\n    const openTab = e => setActive(+e.target.dataset.index); //set active tab\r\n    let ref1 = React.createRef(); //ref to textArea(we need to delete value after click)\r\n    let findCity = \"\";// out value in textarea ,which we send to onClick\r\n    let setFindCity = (elem) => {\r\n        findCity = elem;\r\n    }\r\n    let arrayNextDays = [] //next 7 days\r\n    //get next 7 days\r\n    const initalizeNextDays = () => {\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\r\n        for (let i = 1; i <= 7; i++) {\r\n            var date = new Date();\r\n            date.setDate(date.getDate() + i);\r\n            arrayNextDays.push(days[date.getDay()])\r\n        }\r\n    }\r\n    // handle on \"FIND\"\r\n    const findCityClicked = () => {\r\n        props.getWeatherCity(findCity)\r\n        setFindCity(\"\");\r\n        ref1.current.value = \"\";\r\n        setActive(props.curWeather.length)\r\n    }\r\n    // handle on GPS\r\n    const findGPSClicked = () => {\r\n        props.getWeatherGPS();\r\n        setActive(props.curWeather.length)\r\n    }\r\n\r\n    initalizeNextDays()  // Lets know what 7 days are next(from today date)\r\n\r\n    return (<div className={style.main}>\r\n        <div className={style.options}>\r\n\r\n            {/* Input City textarea */}\r\n            <input ref={ref1}\r\n                   className={style.inputCity}\r\n                   onChange={(e) => {\r\n                       setFindCity(e.target.value)\r\n                   }}\r\n                   type={\"text\"}\r\n                   placeholder={\"Enter city\"}/>\r\n\r\n            {/* find button */}\r\n            <button className={style.findBtn}\r\n                    onClick={findCityClicked}>Find\r\n            </button>\r\n\r\n            {/* gps button*/}\r\n            <img onClick={findGPSClicked} className={style.gpsIcon}\r\n                 src={gps}/>\r\n        </div>\r\n\r\n        {/* tabs initialize*/}\r\n        <div>\r\n            <div className={\"tab\"}>\r\n\r\n                {props.curWeather.map((n, i) => (\r\n                    <button\r\n                        className={`tablinks ${i === active ? 'active' : ''}`}\r\n                        onClick={openTab}\r\n                        data-index={i}\r\n                    >{n.name}</button>\r\n                ))}\r\n            </div>\r\n            {/* Open active TAB */}\r\n            {props.curWeather[active] && <TabContent curWeather={props.curWeather[active]}\r\n                                                     forecast={props.forecast[active]}\r\n                                                     arrayNextDays={arrayNextDays}/>}\r\n        </div>\r\n\r\n\r\n    </div>)\r\n}\r\n\r\nexport default InputContainer","D:\\getphotos\\src\\Components\\ForecastDays.jsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":13},{"ruleId":"57","severity":1,"message":"58","line":60,"column":13,"nodeType":"59","endLine":61,"endColumn":29},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]